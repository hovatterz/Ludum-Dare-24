#!/usr/bin/env ruby
require "rubygems"
require "bundler/setup"
require "gosu"
$LOAD_PATH << File.expand_path("../../lib", __FILE__)
require "roguevolution"

class GameWindow < Gosu::Window
  FONT_HEIGHT = 16
  TILE_SIZE = 32

  def initialize
    super(640, 480, false)
    self.caption = "Roguevolution - Ludum Dare 24 Project"

    @dungeon = Roguevolution::Dungeon.new(5, 50, 50)
    @dungeon.generate!

    @player = Roguevolution::Player.new(@dungeon)

    @tiles = Gosu::Image.load_tiles(self, "media/tiles.png", TILE_SIZE, TILE_SIZE, true)

    @fov = Roguevolution::FOV.new(@dungeon)

    @kobold = Roguevolution::Creatures::Kobold.new(@dungeon)
    @kobold.set_position(@player.position.x + 1, @player.position.y)
    @dungeon.current_floor.creatures << @kobold
  end

  def draw
    half_width = (width / 2 / TILE_SIZE).round
    half_height = (height / 2 / TILE_SIZE).round
    center = @player.position

    i, j = 0, 0
    ((center.x - half_width)..(center.x + half_width)).each do |x|
      ((center.y - half_height)..(center.y + half_height)).each do |y|
        tile = @dungeon.tile_at(x, y)
        next unless tile
        tile_type = Roguevolution::Tilebank[tile.type] rescue Roguevolution::Tilebank[:wall]
        color = if tile.lit?
                  Gosu::Color::WHITE
                elsif tile.seen?
                  Gosu::Color::GRAY
                else
                  Gosu::Color::NONE
                end

        @tiles[tile_type].draw(i * TILE_SIZE, j * TILE_SIZE, Roguevolution::ZIndex::DUNGEON, 1, 1, color)
        unless tile.creature.nil?
          @tiles[Roguevolution::Tilebank[tile.creature.tile_type]].draw(i * TILE_SIZE, j * TILE_SIZE, Roguevolution::ZIndex::DUNGEON, 1, 1, color)
        end

        j += 1
      end
      i += 1
      j = 0
    end
  end

  def update
    if key_group_pressed?([Gosu::KbLeft, Gosu::KbNumpad4, Gosu::KbH])
      @player.move(-1, 0)
    elsif key_group_pressed?([Gosu::KbRight, Gosu::KbNumpad6, Gosu::KbL])
      @player.move(1, 0)
    elsif key_group_pressed?([Gosu::KbUp, Gosu::KbNumpad8, Gosu::KbK])
      @player.move(0, -1)
    elsif key_group_pressed?([Gosu::KbDown, Gosu::KbNumpad2, Gosu::KbJ])
      @player.move(0, 1)
    elsif key_group_pressed?([Gosu::KbNumpad7, Gosu::KbY])
      @player.move(-1, -1)
    elsif key_group_pressed?([Gosu::KbNumpad9, Gosu::KbU])
      @player.move(1, -1)
    elsif key_group_pressed?([Gosu::KbNumpad1, Gosu::KbB])
      @player.move(-1, 1)
    elsif key_group_pressed?([Gosu::KbNumpad3, Gosu::KbN])
      @player.move(1, 1)
    end

    @dungeon.current_floor.creatures.each do |creature|
      if creature.alive?
      else
        @dungeon.tile_at(creature.position.x, creature.position.y).creature = nil
        @dungeon.current_floor.creatures.delete(creature)
      end
    end

    @dungeon.darken
    @fov.calculate(@player.position, 10)
  end

  private

  def key_group_pressed?(group)
    group.select {|id| button_down?(id) }.length > 0
  end
end

window = GameWindow.new
window.show
