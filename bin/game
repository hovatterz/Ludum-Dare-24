#!/usr/bin/env ruby
require "rubygems"
require "bundler/setup"
require "gosu"
$LOAD_PATH << File.expand_path("../../lib", __FILE__)
require "roguevolution"

class GameWindow < Gosu::Window
  FONT_HEIGHT = 16
  TILE_SIZE = 32

  GAME_WIDTH = 480
  GAME_HEIGHT = 540
  GUI_WIDTH = 320
  GUI_HEIGHT = 540

  def initialize
    super(800, 600, false)
    self.caption = "Roguevolution - Ludum Dare 24 Project"

    @dungeon = Roguevolution::Dungeon.new(5, 50, 50)
    @dungeon.generate!

    @player = Roguevolution::Player.new(@dungeon)

    @tiles = Gosu::Image.load_tiles(self, "media/tiles.png", TILE_SIZE, TILE_SIZE, true)

    @fov = Roguevolution::FOV.new(@dungeon)

    @font = Gosu::Font.new(self, "Arial", 14)
    @last_moved = 0
    @last_frame = Gosu::milliseconds
  end

  def draw
    render_dungeon
    render_ui
    render_announcements
  end

  def update
    calculate_delta

    @last_moved += @delta
    return unless @last_moved >= 50 / 1000.0
    @last_moved = 0

    @player.reset_turn
    if key_group_pressed?([Gosu::KbLeft, Gosu::KbNumpad4, Gosu::KbH])
      @player.move(-1, 0)
    elsif key_group_pressed?([Gosu::KbRight, Gosu::KbNumpad6, Gosu::KbL])
      @player.move(1, 0)
    elsif key_group_pressed?([Gosu::KbUp, Gosu::KbNumpad8, Gosu::KbK])
      @player.move(0, -1)
    elsif key_group_pressed?([Gosu::KbDown, Gosu::KbNumpad2, Gosu::KbJ])
      @player.move(0, 1)
    elsif key_group_pressed?([Gosu::KbNumpad7, Gosu::KbY])
      @player.move(-1, -1)
    elsif key_group_pressed?([Gosu::KbNumpad9, Gosu::KbU])
      @player.move(1, -1)
    elsif key_group_pressed?([Gosu::KbNumpad1, Gosu::KbB])
      @player.move(-1, 1)
    elsif key_group_pressed?([Gosu::KbNumpad3, Gosu::KbN])
      @player.move(1, 1)
    elsif key_group_pressed?([Gosu::KbW])
      @player.turn_taken = true
    end

    if @player.turn_taken?
      @dungeon.current_floor.creatures.each do |creature|
        if creature.alive?
          creature.take_turn(@player)
        else
          @player.award_trait(creature)
          @dungeon.current_floor.creatures.delete(creature)
          tile = @dungeon.tile_at(creature.position.x, creature.position.y)
          tile.creature = nil
          tile.bloody = true
        end
      end
    end

    @dungeon.darken
    @fov.calculate(@player.position, 10)
  end

  private
  
  def render_dungeon
    half_width = (GAME_WIDTH / 2 / TILE_SIZE).round
    half_height = (GAME_HEIGHT / 2 / TILE_SIZE).round
    center = @player.position

    i, j = 0, 0
    ((center.x - half_width)..(center.x + half_width)).each do |x|
      ((center.y - half_height)..(center.y + half_height)).each do |y|
        tile = @dungeon.tile_at(x, y)
        unless tile
          j += 1
          next
        end
        tile_type = Roguevolution::Tilebank[tile.type] rescue Roguevolution::Tilebank[:wall]
        color = if tile.lit?
                  Gosu::Color::WHITE
                elsif tile.seen?
                  Gosu::Color::GRAY
                else
                  Gosu::Color::NONE
                end

        @tiles[tile_type].draw(i * TILE_SIZE, j * TILE_SIZE, Roguevolution::ZIndex::DUNGEON, 1, 1, color)
        if tile.bloody?
          @tiles[Roguevolution::Tilebank[:blood]].draw(i * TILE_SIZE, j * TILE_SIZE, Roguevolution::ZIndex::DUNGEON_FEATURE, 1, 1, color)
        end

        unless tile.creature.nil?
          tile.creature.alert
          @tiles[Roguevolution::Tilebank[tile.creature.tile_type]].draw(i * TILE_SIZE, j * TILE_SIZE, Roguevolution::ZIndex::CREATURE, 1, 1, color)
        end

        j += 1
      end
      i += 1
      j = 0
    end
  end

  def render_ui
    player_traits = Hash[@player.traits.map {|trait| [trait.name, ] }]
    player_traits = @player.traits.inject(Hash.new(0)) {|h, x|
      h[x.name] += 1
      h
    }.to_a.sort

    player_damage = "#{@player.damage_die} + #{@player.damage_modifier}"

    zx = GAME_WIDTH + 10
    zy = 10
    @font.draw("Name: #{@player.name}", zx, zy, Roguevolution::ZIndex::UI)
    @font.draw("Health: #{@player.health} / #{@player.max_health}", zx, zy + 14, Roguevolution::ZIndex::UI)
    @font.draw("Damage: #{player_damage}", zx, zy + 28, Roguevolution::ZIndex::UI)
    @font.draw("Armor: #{@player.armor}", zx, zy + 42, Roguevolution::ZIndex::UI)

    @font.draw("Traits:", zx, zy + 56, Roguevolution::ZIndex::UI)
    player_traits.each_with_index do |trait, index|
    @font.draw("x#{trait[1]} - #{trait[0]}", zx, zy + 70 + index * 14,
               Roguevolution::ZIndex::UI)
    end
  end

  def render_announcements
    zx = 10
    zy = GAME_HEIGHT + 10
    messages = Roguevolution::Announcements.messages.reverse.slice(0..2)
    messages.each_with_index do |message, i|
      @font.draw(message, zx, zy + 14 * i, Roguevolution::ZIndex::UI)
    end
  end

  def key_group_pressed?(group)
    group.select {|id| button_down?(id) }.length > 0
  end

  def calculate_delta
    @this_frame = Gosu::milliseconds
    @delta = (@this_frame - @last_frame) / 1000.0
    @last_frame = @this_frame
  end
end

window = GameWindow.new
window.show
